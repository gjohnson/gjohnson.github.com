<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Garrett Johnson]]></title>
  <link href="http://garrett-johnson.com/atom.xml" rel="self"/>
  <link href="http://garrett-johnson.com/"/>
  <updated>2012-04-15T15:25:11-04:00</updated>
  <id>http://garrett-johnson.com/</id>
  <author>
    <name><![CDATA[Garrett Johnson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On the sans-semicolon debate]]></title>
    <link href="http://garrett-johnson.com/blog/2012/04/15/my-issues-with-sans-semicolon/"/>
    <updated>2012-04-15T11:57:00-04:00</updated>
    <id>http://garrett-johnson.com/blog/2012/04/15/my-issues-with-sans-semicolon</id>
    <content type="html"><![CDATA[<p>There was little community drama over the lack of semicolons that was causing an issue for a user of <a href="https://github.com/twitter/bootstrap/issues/3057">twitter&#8217;s bootstrap</a>. I think the most pathetic thing here is the newer users who have to be stuck in the middle with broken code because everyone is teaching them different things; not to mention their actual issue(s) being ignored and burned by &#8220;community leaders&#8221; during their pissing matches.</p>

<p>Here are just a couple of examples that totally cause confusion amongst newcomers:</p>

<p>Users are taught that it is a best practice to lint check their projects. They set their directives to require semicolons, among other things because their JavaScript Book said this is important. However the lint check reports are so convoluted with errors about missing semicolons from external dependencies, they stop running link checks all together until the project structure can be re-organized in a fashion where external dependencies are not link checked.</p>

<blockquote><p><strong>&#8220;Too many errors. (12% scanned).&#8221;</strong></p></blockquote>

<p>Users are also taught the benefits of splitting a project into multiple source files and to concatenate those files, along with any smaller external dependencies into a single file for deployment. This also helps get around the ignored lint check errors mentioned previously. However, with a perfect score on the link check report, loading their application in the browser stops in it&#8217;s tracks with the following error:</p>

<blockquote><p><strong>&#8220;TypeError: undefined is not a function&#8221;</strong></p></blockquote>

<p>It ends up that after concatening their project it ended up looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/*!</span>
</span><span class='line'><span class="cm"> * This is the awesome.js library that is portable and runs EVERYWHERE!</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">global</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'><span class="p">}(</span><span class="nb">window</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*!</span>
</span><span class='line'><span class="cm"> * This is the users code, wrapped in one of those nifty imediate executing functions they learned</span>
</span><span class='line'><span class="cm"> * was also a best practice.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">global</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'><span class="p">})(</span><span class="nb">window</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The issue here being <code>awesome.js</code> did not use semicolons, so once the two files were concatenated, an undefined function invocation was formed between the two imediate executing functions.</p>

<p>The last issue I will mention is the exact issue on <a href="https://github.com/twitter/bootstrap/issues/3057">twitter&#8217;s bootstrap</a>. Once the user took the recommended steps of minifying their project, the removal of whitespace smooshed together statements that were not seperated by semicolons, causing all sorts of wonky errors for the user.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">clearMenus</span><span class="p">()</span>
</span><span class='line'><span class="o">!</span><span class="nx">isActive</span> <span class="o">&amp;&amp;</span> <span class="nx">$parent</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some of these bugs are quite tricky to figure out, most novice JavaScript developers will have a difficult time pin-pointing them, especially since they occur in library code. If or once they do figure it out, <a href="https://github.com/twitter/bootstrap/issues/3057">twitter&#8217;s bootstrap</a> is a good example of what will happen when they seek help from the maintainer(s) of the very projects that are indirectly causing all the best practices learned to go to complete shit. No wonder we see web pages with 15 script includes, unminified, and doing everything that is recommended not to do.</p>

<p>There should not even be a debate whether semicolons are a required syntax or not. I think the simple fact that using semicolons causes no issues and not using them brings out various bugs should make it pretty apparent what we should be doing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Harmony - Scope]]></title>
    <link href="http://garrett-johnson.com/blog/2012/01/04/harmony-scopes/"/>
    <updated>2012-01-04T00:04:00-05:00</updated>
    <id>http://garrett-johnson.com/blog/2012/01/04/harmony-scopes</id>
    <content type="html"><![CDATA[<p>Harmony finally introduces block scope into JS. While the syntax of blocks have always been in JS, they have had no associated context for variables to bind to. This is something you may be familar with if you have ever written any C.</p>

<figure class='code'><figcaption><span>Block scoped variables in C.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">foo</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;foo 1&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">foo</span><span class="p">);</span> <span class="c1">// =&gt; &quot;foo 1&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">foo</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;foo 2&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">bar</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;bar 1&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">foo</span><span class="p">);</span> <span class="c1">// &gt;= &quot;foo 2&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">foo</span><span class="p">);</span> <span class="c1">// =&gt; &quot;foo 1&quot;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">bar</span><span class="p">);</span> <span class="c1">// =&gt; Compiler error about undeclared `bar`.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown in the example above, the declared variables within the block starting on line 8 have no side effects on the variables with the same indentifier declared in the function body block. However, as you probably know, this is not the case in JS; the only context that variables can bind to is locally to a function or globaly.</p>

<!-- More -->




<figure class='code'><figcaption><span>Historically a block had no context associated with it in JS.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;foo 1&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bar</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; &#39;foo 1&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;foo 2&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="s1">&#39;bar 1&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">print</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; &#39;foo 2&#39;</span>
</span><span class='line'>        <span class="nx">print</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span> <span class="c1">// =&gt; &#39;bar 1&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; &#39;foo 2&#39;</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span> <span class="c1">// =&gt; &#39;bar 1&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As previously mentioned, Harmony will fix this by adding block scope binding of variables; it will be achieved through the introduction of the <code>let</code> keyword. The syntax change is required because changing the scope semantics of <code>var</code> to bind to block scope would break the entire internet, however <code>let</code> can certainly be used to replace <code>var</code>.</p>

<figure class='code'><figcaption><span>Using let as a var replacement.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;foo 1&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">let</span> <span class="nx">bar</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; &#39;foo 1&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;foo 2&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="s1">&#39;bar 1&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">print</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; &#39;foo 2&#39;</span>
</span><span class='line'>        <span class="nx">print</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span> <span class="c1">// =&gt; &#39;bar 1&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; &#39;foo 2&#39;</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span> <span class="c1">// =&gt; undefined</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Scoping variables within the block of a condition.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bum&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">print</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; throws ReferenceError</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Scoping &#8220;counter&#8221; variables of a for-loop.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">print</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="c1">// =&gt; throws ReferenceError</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Scoping variables within the block of a loop.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="o">--</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;foo &#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">print</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; throws ReferenceError</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will notice in the last example that <code>let</code> can actually be used in the global context, even when no block is declared. It will behave just like a global variable would. I think the fact that this behavior was been implemented strongly encourages to work towards treating <code>let</code> as a <code>var</code> replacement.</p>

<p>Using <code>let</code> is not the only new keyword being introduced with blocked scoped bindings. There is also <code>const</code>, which is used to declare a constant. While this has been around for a while as a non-standard in a few JS engines, it has been re-defined to follow the block scope binding spec in Harmony.</p>

<figure class='code'><figcaption><span>Constants follow block scoping rules.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">goodbye</span> <span class="o">=</span> <span class="s1">&#39;goodbye&#39;</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">goodbye</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">print</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span>
</span><span class='line'><span class="nx">print</span><span class="p">(</span><span class="nx">goodbye</span><span class="p">);</span> <span class="c1">// =&gt; throws ReferenceError</span>
</span></code></pre></td></tr></table></div></figure>


<p>While it might be apparent to some, I will still mention that unlike variables declared with <code>let</code> or <code>var</code>, a constant cannot be declared without an initializer. When a constant is declared, a value must be assigned.</p>

<figure class='code'><figcaption><span>Constants require an intializer, otherwise a SyntaxError will be thrown.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'><span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;fooooo&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Variables should also not share the same identifier as a constant. Currently Spidermonkey implements this behavior, however V8 as of (v.3.8.4) will correctly throw an error when a variable is declared with the same identifer as a previously declared constant. However V8 will not throw an error when a constant is declared with the same identifer as a previous declared variable. IMHO Spidermonkey got this right, and perhaps this will be fixed in V8.</p>

<figure class='code'><figcaption><span>Constant re-declaration errors.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Both engines will correctly throw a TypeError here.</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">bum</span> <span class="o">=</span> <span class="s1">&#39;bum&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">let</span> <span class="nx">bum</span> <span class="o">=</span> <span class="s1">&#39;bum bum&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// However only V8 allows this, while Spidermonkey still throws a TypeError.</span>
</span><span class='line'><span class="nx">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="s1">&#39;bum bum&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">bar</span> <span class="o">=</span> <span class="s1">&#39;bum&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">print</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The additions for scope in Harmony will certainly promote cleaner code and I definitely look forward to using them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Harmony]]></title>
    <link href="http://garrett-johnson.com/blog/2012/01/01/es-harmony-part-one/"/>
    <updated>2012-01-01T14:53:00-05:00</updated>
    <id>http://garrett-johnson.com/blog/2012/01/01/es-harmony-part-one</id>
    <content type="html"><![CDATA[<p>Harmony is an ECMAScript (ES) project/effort that aims to improve the current ES spec (fifth edition) with new language features and some house cleaning of quirky behavior. It will ultimately form what will become sixth edition of ES. More details can found on <a href="http://wiki.ecmascript.org/doku.php?id=harmony:harmony">ES wiki</a>.</p>

<!-- more -->


<p>Some <a href="http://wiki.ecmascript.org/doku.php?id=harmony:proposals">Harmony slated</a> features are starting to make their way into various JS engines for the intriqued to tinker around with. Right around Christmas time, <a href="https://plus.google.com/113127438179392830442/posts/T615Md5JPQG">Google Chrome added a flag</a> to enable a few of them. <a href="http://code.google.com/p/v8/">V8</a> is the JS engine underneath Chrome, so another usefull option is to <a href="http://code.google.com/apis/v8/build.html">download and build V8 locally</a>; you can then pass the <code>--harmony</code> argument to the V8 shell. I like this option because these features do not need a DOM and even though node.js also uses V8 under the hood, I don&#8217;t have to muck around with multiple node installs, etc.</p>

<figure class='code'><figcaption><span>Executing a script via the V8 shell.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>~ <span class="nv">$ </span>d8 my_script.js --harmony
</span></code></pre></td></tr></table></div></figure>


<p>Mozilla&#8217;s JS engine, <a href="https://developer.mozilla.org/en/SpiderMonkey">SpiderMonkey</a>, implements some of these features as well and actually quite a few others which have been slated for the Harmony spec. Most of these require an opt in too, so you need to pass the version flag with the latest version to the type attribute on the script tag.</p>

<figure class='code'><figcaption><span>Opt in via the script tag version.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript;version=1.8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just as with V8, you can <a href="https://developer.mozilla.org/En/SpiderMonkey/Build_Documentation">download and build SpiderMonkey locally</a>. This is actually how I currently prefer to try out new features that I come across. The only real reason for this decision is that currently SpiderMonkey has a few more features to play around with than V8.</p>

<figure class='code'><figcaption><span>Executing a script via SpiderMonkey.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>~ <span class="nv">$ </span>js -f my_script.js
</span></code></pre></td></tr></table></div></figure>


<p>I will attempt to explore new additions as they are implemented, each one having a post categorized under <a href="http://garrett-johnson.com/blog/categories/harmony">harmony</a>. Be sure to check back for updates, as I am sure something will change and I will try to update accordingly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speaking at a Conference]]></title>
    <link href="http://garrett-johnson.com/blog/2011/12/27/speaking-at-a-conference/"/>
    <updated>2011-12-27T21:44:00-05:00</updated>
    <id>http://garrett-johnson.com/blog/2011/12/27/speaking-at-a-conference</id>
    <content type="html"><![CDATA[<p>I recently decided to take a big step out and speak at a conference. While I have spoken in front of the <a href="http://www.charlottejs.org," title="Charlotte JavaScript Meetup">CharlotteJS</a> group numerous times, this was the first time I gave a presentation in a conference setting. Here are three lessons I learned while loosing my conference presenter virginity per say. :-)</p>

<!-- more -->


<ol>
<li><p>Understand your slides and outline, but don’t be a stickler and ramble pre-determined words slide by slide. Normally when speaking at meetups, I barely prepare&#8230; Usually there are a few slides, I just go with the flow, do on the fly coding, etc. I of course thought that a conference presentation should not be this relaxed. However, after the fact, I now think there needs to be a good middle ground. By that I mean while the presentation should be followed with a concrete outline, there still needs to be interaction with the audience. Once you stop that interaction, you loose the attention and interest in your topic. The audience should be able to leave the presentation with the feeling that you as the presenter fulfilled whatever promise you made within your presentation description on the on the conference website.</p></li>
<li><p>Understand your audience. Being in technology, some people will be interested in any type of geeky topic you share, however the presentation should be zoned in on why the majority of the audience is there. For example, if it is a web development conference, the presentation should be relative to web development, not low level historical facts, that while may support the underlying concerns of web development, don’t really concern the interests of the audience today. It might be okay to include these historical facts, but be sure to tie it into the main interest of the audience with supporting examples.</p></li>
<li><p>Take the responsibility as a speaker serious. Whether it is a $2,000 or a free conference. The responsibility of a speaker is a important one, the audience sacrificed (in some way or another) to come see a quality presentations. Take the time before the live conference presentation to tune everything about the talk, do not just wrap up the presentation for the first time 5 minutes before speaking. It is owed the audience to have everything well prepared and ready, this should include everything from a solid talk to making sure the computer works well with the projector with out issue.</p></li>
</ol>


<p>I know that I learned a lot from this experience and look forward to presenting again while applying the lessons learned noted here. If you enjoy sharing what-so-ever, I can not recommend enough to get involved by speaking at a conference. It is quite an experience.</p>
]]></content>
  </entry>
  
</feed>
